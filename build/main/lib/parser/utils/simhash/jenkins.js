"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jenkins = void 0;
class Jenkins {
    constructor() {
        this.pc = 0;
        this.pb = 0;
        /**
         * Default first initial seed.
         */
        this.pc = 0;
        /**
         * Default second initial seed.
         */
        this.pb = 0;
    }
    // --------------------------------------------------
    // Public access
    // --------------------------------------------------
    /**
     * Computes and returns 32-bit hash of given message.
     */
    hash32(msg) {
        const h = this.lookup3(msg, this.pc, this.pb);
        return h.c.toString(16);
    }
    /**
     * Computes and returns 32-bit hash of given message.
     */
    hash64(msg) {
        const h = this.lookup3(msg, this.pc, this.pb);
        return h.b.toString(16) + h.c.toString(16);
    }
    lookup3(k, pc, pb) {
        let length = k.length;
        let a;
        let b;
        let c;
        a = b = c = 0xdeadbeef + length + pc;
        c += pb;
        let offset = 0;
        let mixed;
        while (length > 12) {
            a += k.charCodeAt(offset + 0);
            a += k.charCodeAt(offset + 1) << 8;
            a += k.charCodeAt(offset + 2) << 16;
            a += k.charCodeAt(offset + 3) << 24;
            b += k.charCodeAt(offset + 4);
            b += k.charCodeAt(offset + 5) << 8;
            b += k.charCodeAt(offset + 6) << 16;
            b += k.charCodeAt(offset + 7) << 24;
            c += k.charCodeAt(offset + 8);
            c += k.charCodeAt(offset + 9) << 8;
            c += k.charCodeAt(offset + 10) << 16;
            c += k.charCodeAt(offset + 11) << 24;
            mixed = this.mix(a, b, c);
            a = mixed.a;
            b = mixed.b;
            c = mixed.c;
            length -= 12;
            offset += 12;
        }
        switch (length) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            /* @ts-ignore */
            case 12:
                c += k.charCodeAt(offset + 11) << 24;
            /* @ts-ignore */
            case 11:
                c += k.charCodeAt(offset + 10) << 16;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            /* @ts-ignore */
            case 10:
                c += k.charCodeAt(offset + 9) << 8;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            /* @ts-ignore */
            case 9:
                c += k.charCodeAt(offset + 8);
            /* @ts-ignore */
            case 8:
                b += k.charCodeAt(offset + 7) << 24;
            /* @ts-ignore */
            case 7:
                b += k.charCodeAt(offset + 6) << 16;
            /* @ts-ignore */
            case 6:
                b += k.charCodeAt(offset + 5) << 8;
            /* @ts-ignore */
            case 5:
                b += k.charCodeAt(offset + 4);
            /* @ts-ignore */
            case 4:
                a += k.charCodeAt(offset + 3) << 24;
            /* @ts-ignore */
            case 3:
                a += k.charCodeAt(offset + 2) << 16;
            /* @ts-ignore */
            case 2:
                a += k.charCodeAt(offset + 1) << 8;
            /* @ts-ignore */
            case 1:
                a += k.charCodeAt(offset + 0);
                break;
            /* @ts-ignore */
            case 0:
                return { c: c >>> 0, b: b >>> 0 };
        }
        // Final mixing of three 32-bit values in to c
        mixed = this.finalMix(a, b, c);
        a = mixed.a;
        b = mixed.b;
        c = mixed.c;
        return { c: c >>> 0, b: b >>> 0 };
    }
    /**
     * Mixes 3 32-bit integers reversibly but fast.
     */
    mix(a, b, c) {
        a -= c;
        a ^= this.rot(c, 4);
        c += b;
        b -= a;
        b ^= this.rot(a, 6);
        a += c;
        c -= b;
        c ^= this.rot(b, 8);
        b += a;
        a -= c;
        a ^= this.rot(c, 16);
        c += b;
        b -= a;
        b ^= this.rot(a, 19);
        a += c;
        c -= b;
        c ^= this.rot(b, 4);
        b += a;
        return { a: a, b: b, c: c };
    }
    /**
     * Final mixing of 3 32-bit values (a,b,c) into c
     */
    finalMix(a, b, c) {
        c ^= b;
        c -= this.rot(b, 14);
        a ^= c;
        a -= this.rot(c, 11);
        b ^= a;
        b -= this.rot(a, 25);
        c ^= b;
        c -= this.rot(b, 16);
        a ^= c;
        a -= this.rot(c, 4);
        b ^= a;
        b -= this.rot(a, 14);
        c ^= b;
        c -= this.rot(b, 24);
        return { a: a, b: b, c: c };
    }
    /**
     * Rotate x by k distance.
     */
    rot(x, k) {
        return (x << k) | (x >> (32 - k));
    }
}
exports.Jenkins = Jenkins;
// --------------------------------------------------
// Private methods
// --------------------------------------------------
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVua2lucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvcGFyc2VyL3V0aWxzL3NpbWhhc2gvamVua2lucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFhLE9BQU87SUFHbEI7UUFGTyxPQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1AsT0FBRSxHQUFHLENBQUMsQ0FBQztRQUVaOztXQUVHO1FBQ0gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFWjs7V0FFRztRQUNILElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELHFEQUFxRDtJQUNyRCxnQkFBZ0I7SUFDaEIscURBQXFEO0lBRXJEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEdBQVc7UUFDdkIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsR0FBVztRQUN2QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDTyxPQUFPLENBQUMsQ0FBUyxFQUFFLEVBQVUsRUFBRSxFQUFVO1FBQy9DLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLENBQUM7UUFDTixJ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L0IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDWixDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNaLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRVosT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ssR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztRQUN6QyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSyxRQUFRLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQzlDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNQLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNQLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDUCxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckIsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUNEOztPQUVHO0lBQ0ssR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQzlCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7QUFoTEQsMEJBZ0xDO0FBRUQscURBQXFEO0FBQ3JELGtCQUFrQjtBQUNsQixxREFBcUQifQ==